<?xml version="1.0" encoding="UTF-8"?>
<project name="Tbs Bundle" basedir="." default="help">
	
	<!-- ENV VARS -->
	<property name="documentup"    value="http://documentup.com/leonardothibes/Tbs"      />
	<property name="code-standard" value="PSR2"                                          />
	<property name="src"           value="./src"                                         />
	<property name="tmp"           value="./tmp"                                         />
	<property name="app"           value="${src}/Tbs"                                    />
	<property name="docs"          value="./docs"                                        />
	<property name="build"         value="./build"                                       />
	<property name="vendor"        value="./vendor"                                      />
	<property name="compressor"    value="${vendor}/bin/yuicompressor"                   />
	<property name="tests"         value="./tests/Tbs"                                   />
	<property name="phpunit"       value="${vendor}/bin/phpunit -c ${tests}/phpunit.xml" />
	<!-- ENDS ENV VARS -->
	
	<!-- HELP TEXT -->
	<target name="help">
		<echo>Actions: [rw|clean|clean-all|install|test|analyze|doc|version|build|db]</echo>
	</target>
	<!-- ENDS HELP TEXT -->
	
	<!-- RW -->
	<target name="rw">
		
		<echo>Creating content in ${src}/data...</echo>
		
		<mkdir dir="${tmp}" />
		<chmod file="${tmp}" mode="0755" />
		
		<!-- THE LOG DIR -->
		<mkdir dir="${tmp}/logs" />
		<chmod file="${tmp}/logs" mode="0777" />
		
		<php function="date" returnProperty="data">
			<param value="Y-m-d" />
		</php>
		
		<touch file="${tmp}/logs/php_${data}.log"         />
		<touch file="${tmp}/logs/tbs_${data}.log" />
		
		<exec command="chmod 777 ${tmp}/logs/*.log" />
		<!-- ENDS THE LOG DIR -->
		
	</target>
	<!-- ENDS RW -->
	
	<!-- CLEAN -->
	<target name="clean">
		<echo message="Cleaning"                              />
		<exec command="rm -Rf ${tmp}"                         />
		<exec command="rm -Rf ${build}"                       />
		<exec command="rm -Rf ${docs}/Tests/*"                />
		<exec command="rm -Rf ${docs}/PHPDoc/*"               />
		<exec command="find . | grep .DS_Store | xargs rm -f" />
	</target>
	<!-- ENDS CLEAN -->
	
	<!-- CLEAN-ALL -->
	<target name="clean-all" depends="clean">
		<exec command="rm -f  ./.vagrant"      />
		<exec command="rm -f  ./composer.lock" />
		<exec command="rm -Rf ${vendor}"       />
	</target>
	<!-- ENDS CLEAN-ALL -->
	
	<!-- CHECK-COMPOSER -->
	<target name="check-composer" depends="clean">
		<mkdir dir="${vendor}" mode="755" />
		<exec command="
			test -f ${vendor}/composer.phar || curl -sS https://getcomposer.org/installer | php -- --install-dir=${vendor}
		" />
	</target>
	<!-- ENDS CHECK-COMPOSER -->
	
	<!-- INSTALL -->
	<target name="install" depends="check-composer">
		<exec command="rm -f composer.lock" />
		<composer composer="${vendor}/composer.phar" command="install">
			<arg value="--dev" />
		</composer>
		<chmod   file  ="${vendor}/nervo/yuicompressor/yuicompressor.jar" mode="0755"          />
		<symlink target="../nervo/yuicompressor/yuicompressor.jar"        link="${compressor}" />
	</target>
	<!-- ENDS INSTALL -->
	
	<!-- TEST -->
	<target name="test">
		<exec command="${phpunit} --testdox --testdox-html=${docs}/Tests/testdox.html" checkreturn="true" />
		<echo>All tests OK!</echo>
	</target>
	<!-- ENDS TEST -->
	
	<!-- ANALYZE -->
	<target name="analyze">
		<exec 
            command="${phpunit} --testdox --testdox-html=${docs}/Tests/testdox.html --coverage-html=${docs}/Tests/coverage" 
            checkreturn="true"
		/>
		<echo>Reports generated!</echo>
	</target>
	<!-- ENDS ANALYZE -->
	
	<!-- DOC -->
	<target name="doc">
		<echo>Generating api documentation...</echo>
		<exec command="
			phpdoc -d '${app}/application,${app}/library/Util' -t ${docs}/PHPDoc"
		/>
	</target>
	<!-- ENDS DOC -->
	
	<!-- CODE-SNIFFER -->
	<target name="code-sniffer">
		<phpcodesniffer
			standard              = "${code-standard}"
			format                = "full"
			encoding              = "utf-8"
			allowedFileExtensions = "php"
			haltonerror           = "true"
		>
			<fileset dir="${app}"  />
		</phpcodesniffer>
		<echo>Code Sniffer OK!</echo>
	</target>
	<!-- ENDS CODE-SNIFFER -->
	
	<!-- NEXT-VERSION -->
	<target name="next-version">
		<exec command="git tag > /tmp/TAG ; tail -1 /tmp/TAG" outputProperty="tag" />
		<php function="str_replace" returnProperty="tag">
			<param value="-alpha" />
			<param value="" />
			<param value="${tag}" />
		</php>
		<php function="str_replace" returnProperty="tag">
			<param value="-beta"  />
			<param value=""       />
			<param value="${tag}" />
		</php>
		
		<exec command="echo ${tag} | cut -d '.' -f 1" outputProperty="main"  />
		<exec command="echo ${tag} | cut -d '.' -f 2" outputProperty="major" />
		<exec command="echo ${tag} | cut -d '.' -f 3" outputProperty="minor" />
		<php expression="${minor}+1" returnProperty="minor"     />
		<property name="next" value="${main}.${major}.${minor}" />
		
		<propertyprompt propertyName="version" defaultValue="${next}" promptText="Informe o número da versão" />
		<if>
			<equals arg1="${version}" arg2="" />
			<then>
				<fail message="É obrigatório informar uma versão!" />
			</then>
		</if>
	</target>
	<!-- ENDS NEXT-VERSION -->
	
	<!-- VERSION -->
	<target name="version">
		<exec command="cat ${app}/Version/Number.txt" outputProperty="tag" />
		<echo>Current version: ${tag}</echo>
	</target>
	<!-- ENDS VERSION -->
	
	<!-- BUILD (code-sniffer + phpunit + phpdoc) -->
	<target name="build" depends="next-version, clean, analyze, code-sniffer, doc">
		<echo message="Building version ${version}..."                                    />
		<exec command="echo ${version} > ${app}/Version/Number"                           />
		<exec command="git commit -m 'updating version number' ${app}/Version/Number.txt" />
		
		<exec command="git tag ${version}"                                                />
		<exec command="git pull ; git push"                                               />
		<exec command="git pull ; git push origin ${version}:${version}"                  />
		
		<echo message="Recompiling documentation on ${documentup}..."                     />
		<exec command="wget ${documentup}/recompile -O /dev/null"                         />
	</target>
	<!-- ENDS BUILD -->
	
	<!-- DB -->
	<target name="db">
	   <if><equals arg1="${env}" arg2='${env}' />
	       <then><property name="env" value="development" /></then>
	   </if>
	   <property file="${docs}/Phing/${env}.properties" />
	   <pdosqlexec
           url      = "${dbtype}:host=${dbhost}"
           userid   = "${dbuser}"
           password = "${dbpass}"
       >CREATE DATABASE IF NOT EXISTS ${dbname}</pdosqlexec>
	   <pdosqlexec
	       url      = "${dbtype}:host=${dbhost};dbname=${dbname}"
           userid   = "${dbuser}"
           password = "${dbpass}"
           src      = "${docs}/Db/db-create.sql"
	   />
	   <pdosqlexec
           url      = "${dbtype}:host=${dbhost};dbname=${dbname}"
           userid   = "${dbuser}"
           password = "${dbpass}"
           src      = "${docs}/Db/db-populate.sql"
       />
	</target>
	<!-- ENDS DB -->

</project>